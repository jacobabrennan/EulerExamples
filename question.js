//==== QUESTION ================================================================
/*
 *  This file provides a function for generating question objects.
 *  This function must be provided with an object to serve as a blueprint.
 *  The blueprint object must be of the following form:
 *      {
 *          eulerNumber: [number],
 *          questionText: [string],
 *          strategy: [string],
 *          compute: [function, returns a number]
 *          [other custom keys]: [any value]
 *      }
 */
//==============================================================================



module.exports = (function (){
    /* The question prototype.
     * Instances of this object will be generated by the main function.
     */
    var question = {
        eulerNumber: NaN,
        questionText: '',
        strategy: '',
        compute: function (){},
        //
        test: function (expectedValue){
            /* Called by the test object as part of automated testing.
             * Must return a boolean value.
             * This is mostly a stub in case future versions need complex testing.
             */
            return (this.compute() === expectedValue);
        },
        pack: function (){
            /* Used to send the client info about the question. */
            return {
                eulerNumber: this.eulerNumber,
                questionText: this.questionText,
                strategy: this.strategy,
                answer: this.compute()
            }
        }
    }
    /* Return the main function.
     * This is what other files will reference when they call require('./question.js');
     * Instantiates a new question object based on a blueprint object, and returns it.
     */
    return function (questionBlueprint){
        var questionConfiguration = {};
        for(key in questionBlueprint){
            if(!questionBlueprint.hasOwnProperty(key)){ continue;}
            questionConfiguration[key] = {value: questionBlueprint[key]};
        }
        return Object.create(question, questionConfiguration);
    };
})();